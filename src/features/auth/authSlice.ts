import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { RootState } from "../../app/store";
import { userAuth } from "./authAPI";
import { AuthRequest } from "./types";

export interface CounterState {
  authStatus: boolean;
  email: string;
  lastName: string;
  error: string;
  status: "success" | "loading" | "failed";
}

const initialState: CounterState = {
  authStatus: false,
  email: "",
  lastName: "",
  error: "",
  status: "success",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const authAsync = createAsyncThunk(
  "auth/userAuth",
  async (body: AuthRequest) => {
    try {
      const response = await userAuth(body);
      return response;
    } catch (e: any) {
      return Promise.reject(e?.error);
    }
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(authAsync.pending, (state) => {
        state.status = "loading";
        state.authStatus = false;
        state.email = "";
        state.lastName = "";
        state.error = "";
      })
      .addCase(authAsync.fulfilled, (state, { payload }) => {
        state.status = "success";
        state.authStatus = true;
        state.email = payload.email;
        state.lastName = payload.lastName;
      })
      .addCase(authAsync.rejected, (state, { error }) => {
        state.status = "failed";
        state.error = error.message || "Something happend. Try later";
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectStatus = (state: RootState) => state.auth.authStatus;

export const selectName = (state: RootState) => state.auth.lastName;

export const selectError = (state: RootState) => state.auth.error;

export default authSlice.reducer;
